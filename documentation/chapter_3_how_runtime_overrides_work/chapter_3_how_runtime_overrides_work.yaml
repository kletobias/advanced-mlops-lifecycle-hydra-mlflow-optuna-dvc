base_name: chapter_3_how_runtime_overrides_work
extension: md
title: Chapter 3 - How Runtime Overrides Work
content_chapter:
- section_num: 0
  section_name: Core Concept of Hydra Overrides
  content_section:
  - "### 3.1 Core Concept\n\n- **Dynamic Parameter Switching**  \n  By default, `config.yaml`\
    \ sets a baseline for each group (e.g., `data_versions=base`, `models=rf_optuna_trial_params`).\
    \ With Hydra, you can override them at runtime. For example:\n  ```sh\n  python\
    \ scripts/universal_step.py \\\n    setup.script_base_name=lag_columns \\\n  \
    \  data_versions=v10 \\\n    transformations=lag_columns\n  ```\n  This single\
    \ command changes your script’s behavior from one config to another without editing\
    \ any YAML file directly.\n\n- **Single vs. Multiple Overrides**  \n  You can\
    \ stack multiple overrides, e.g.:\n  ```sh\n  python scripts/universal_step.py\
    \ \\\n    setup.script_base_name=drop_rare_drgs \\\n    data_versions=v6 \\\n\
    \    model_params=rf_optuna_trial_params\n  ```\n  Hydra merges them in memory,\
    \ so the pipeline uses version `v6` data while preparing for a random forest trial.\
    \  \n\n- **Fewer Scripts, More Flexibility**  \n  Instead of writing new code\
    \ for each scenario, you create or modify config files. The pipeline adjusts automatically\
    \ at runtime—no duplication of logic."
- section_num: 1
  section_name: Practical Examples
  content_section:
  - "### 3.2 Practical Examples of Overrides\n\n- **Switching Data Versions**  \n\
    \  When you want to run your transformations on `v13` data, you pass `data_versions=v13`.\
    \ The `universal_step.py` script then sees `cfg.data_versions.data_version_input='v13'`\
    \ and automatically picks the correct CSV path (`./data/v13/v13.csv`).\n\n- **Toggling\
    \ Output Writing**  \n  If you only want to read data and not save output (e.g.,\
    \ for debugging), you can override I/O policies:\n  ```sh\n  python scripts/universal_step.py\
    \ \\\n    setup.script_base_name=drop_rare_drgs \\\n    io_policy.WRITE_OUTPUT=false\n\
    \  ```\n  This stops the pipeline from creating new CSVs or metadata files, ideal\
    \ for quick checks.\n\n- **Model Tuning with Optuna**  \n  If you’d like to switch\
    \ from default random-forest hyperparameters to an Optuna-driven search, set `model_params=rf_optuna_trial_params`:\n\
    \  ```sh\n  python scripts/universal_step.py \\\n    setup.script_base_name=rf_optuna_trial\
    \ \\\n    data_versions=v11 \\\n    model_params=rf_optuna_trial_params\n  ```\n\
    \  No code changes required—just a single override pointing to a YAML file with\
    \ all the hyperparameter search details.\n\nThese override patterns mean your\
    \ entire ML pipeline, from data ingestion through model training, is fully configurable\
    \ at runtime. It’s both simpler and more powerful than copying or rewriting scripts\
    \ for every new scenario."
